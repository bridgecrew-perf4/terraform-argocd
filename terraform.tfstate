{
  "version": 4,
  "terraform_version": "0.14.5",
  "serial": 6,
  "lineage": "cc40805d-1539-be55-d43b-b1a40f2d4036",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "argo",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.12.3",
                "chart": "argo",
                "name": "argo",
                "namespace": "cicd",
                "revision": 1,
                "values": "{\"artifactRepository\":{\"archiveLogs\":false,\"s3\":{\"accessKeySecret\":{\"key\":\"accesskey\"},\"insecure\":true,\"secretKeySecret\":{\"key\":\"secretkey\"}}},\"controller\":{\"affinity\":{},\"containerRuntimeExecutor\":\"docker\",\"extraEnv\":[],\"image\":{\"tag\":\"\"},\"instanceID\":{\"enabled\":false},\"links\":[],\"loadBalancerSourceRanges\":[],\"logging\":{\"globallevel\":\"0\",\"level\":\"info\"},\"metricsConfig\":{\"enabled\":false,\"path\":\"/metrics\",\"port\":8080},\"metricsServicePort\":8080,\"metricsServicePortName\":\"metrics\",\"name\":\"workflow-controller\",\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"parallelism\":null,\"pdb\":{\"enabled\":false},\"persistence\":{},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":\"\",\"replicas\":1,\"resources\":{},\"serviceAccount\":\"argo\",\"serviceAccountAnnotations\":{},\"serviceAnnotations\":{},\"serviceLabels\":{},\"serviceMonitor\":{\"additionalLabels\":{},\"enabled\":false},\"serviceType\":\"ClusterIP\",\"telemetryConfig\":{\"enabled\":false,\"path\":\"/telemetry\",\"port\":8081},\"telemetryServicePort\":8081,\"telemetryServicePortName\":\"telemetry\",\"tolerations\":[],\"workflowDefaults\":{},\"workflowNamespaces\":[\"default\"],\"workflowRestrictions\":{}},\"crdVersion\":\"v1alpha1\",\"createAggregateRoles\":true,\"executor\":{\"env\":{},\"image\":{\"tag\":\"\"},\"resources\":{},\"securityContext\":{}},\"images\":{\"controller\":\"workflow-controller\",\"executor\":\"argoexec\",\"namespace\":\"argoproj\",\"pullPolicy\":\"Always\",\"pullSecrets\":[],\"server\":\"argocli\",\"tag\":\"v2.12.3\"},\"init\":{\"serviceAccount\":\"\"},\"installCRD\":true,\"minio\":{\"defaultBucket\":{\"enabled\":true,\"name\":\"argo-artifacts\"},\"install\":false},\"server\":{\"affinity\":{},\"baseHref\":\"/\",\"clusterWorkflowTemplates\":{\"enableEditing\":true},\"createServiceAccount\":true,\"enabled\":true,\"extraArgs\":[],\"image\":{\"tag\":\"\"},\"ingress\":{\"enabled\":false},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"name\":\"server\",\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"pdb\":{\"enabled\":false},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":\"\",\"replicas\":1,\"resources\":{},\"secure\":false,\"serviceAccount\":\"argo-server\",\"serviceAccountAnnotations\":{},\"serviceAnnotations\":{},\"serviceLabels\":{},\"servicePort\":2746,\"serviceType\":\"ClusterIP\",\"sso\":null,\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"singleNamespace\":false,\"useDefaultArtifactRepo\":false,\"useStaticCredentials\":true,\"workflow\":{\"namespace\":\"\",\"rbac\":{\"create\":false},\"serviceAccount\":{\"annotations\":{},\"create\":false,\"name\":\"argo-workflow\"}}}",
                "version": "0.15.2"
              }
            ],
            "name": "argo",
            "namespace": "cicd",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "images:\n  namespace: argoproj\n  controller: workflow-controller\n  server: argocli\n  executor: argoexec\n  pullPolicy: Always\n  # Secrets with credentials to pull images from a private registry\n  pullSecrets: []\n  # - name: argo-pull-secret\n  tag: v2.12.3\n\ncrdVersion: v1alpha1\ninstallCRD: true\n\ninit:\n  # By default the installation will not set an explicit one, which will mean it uses `default` for the namespace the chart is\n  # being deployed to.  In RBAC clusters, that will almost certainly fail.  See the NOTES: section of the readme for more info.\n  serviceAccount: \"\"\n\ncreateAggregateRoles: true\n\n# Restrict Argo to only deploy into a single namespace by apply Roles and RoleBindings instead of the Cluster equivalents,\n# and start argo-cli with the --namespaced flag. Use it in clusters with strict access policy.\nsingleNamespace: false\n\nworkflow:\n  namespace: \"\"  # Specify namespace if workflows run in another namespace than argo. This controls where the service account and RBAC resources will be created.\n  serviceAccount:\n    create: false  # Specifies whether a service account should be created\n    annotations: {}\n    name: \"argo-workflow\"  # Service account which is used to run workflows\n  rbac:\n    create: false  # adds Role and RoleBinding for the above specified service account to be able to run workflows\n\ncontroller:\n  image:\n    # Overrides .images.tag if defined.\n    tag: \"\"\n  # parallelism dictates how many workflows can be running at the same time\n  parallelism:\n  # podAnnotations is an optional map of annotations to be applied to the controller Pods\n  podAnnotations: {}\n  # Optional labels to add to the controller pods\n  podLabels: {}\n  # SecurityContext to set on the controller pods\n  podSecurityContext: {}\n  # podPortName: http\n  metricsConfig:\n    enabled: false\n    path: /metrics\n    port: 8080\n  persistence: {}\n  # connectionPool:\n  #   maxIdleConns: 100\n  #   maxOpenConns: 0\n  # # save the entire workflow into etcd and DB\n  # nodeStatusOffLoad: false\n  # # enable archiving of old workflows\n  # archive: false\n  # postgresql:\n  #   host: localhost\n  #   port: 5432\n  #   database: postgres\n  #   tableName: argo_workflows\n  #   # the database secrets must be in the same namespace of the controller\n  #   userNameSecret:\n  #     name: argo-postgres-config\n  #     key: username\n  #   passwordSecret:\n  #     name: argo-postgres-config\n  #     key: password\n  workflowDefaults: {}  # Only valid for 2.7+\n  #  spec:\n  #    ttlStrategy:\n  #      secondsAfterCompletion: 84600\n  # workflowWorkers: 32\n  # podWorkers: 32\n  workflowRestrictions: {}  # Only valid for 2.9+\n  #  templateReferencing: Strict|Secure\n  telemetryConfig:\n    enabled: false\n    path: /telemetry\n    port: 8081\n  serviceMonitor:\n    enabled: false\n    additionalLabels: {}\n  serviceAccount: argo\n  # Service account annotations\n  serviceAccountAnnotations: {}\n  name: workflow-controller\n  workflowNamespaces:\n    - default\n  containerRuntimeExecutor: docker\n  instanceID:\n    # `instanceID.enabled` configures the controller to filter workflow submissions\n    # to only those which have a matching instanceID attribute.\n    enabled: false\n    # NOTE: If `instanceID.enabled` is set to `true` then either `instanceID.userReleaseName`\n    # or `instanceID.explicitID` must be defined.\n    # useReleaseName: true\n    # explicitID: unique-argo-controller-identifier\n  logging:\n    level: info\n    globallevel: \"0\"\n  serviceType: ClusterIP\n  metricsServicePort: 8080\n  metricsServicePortName: metrics\n  telemetryServicePort: 8081\n  telemetryServicePortName: telemetry\n  # Annotations to be applied to the controller Service\n  serviceAnnotations: {}\n  # Optional labels to add to the controller Service\n  serviceLabels: {}\n  # Source ranges to allow access to service from. Only applies to\n  # service type `LoadBalancer`\n  loadBalancerSourceRanges: []\n  resources: {}\n  # The list of environment variable definitions to be added to the controller\n  # manages container verbatim.\n  extraEnv: []\n  replicas: 1\n  pdb:\n    enabled: false\n    # minAvailable: 1\n    # maxUnavailable: 1\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n  tolerations: []\n  affinity: {}\n  # Leverage a PriorityClass to ensure your pods survive resource shortages\n  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/\n  # PriorityClass: system-cluster-critical\n  priorityClassName: \"\"\n  # https://argoproj.github.io/argo/links/\n  links: []\n\n# executor controls how the init and wait container should be customized\nexecutor:\n  image:\n    # Overrides .images.tag if defined.\n    tag: \"\"\n  resources: {}\n  # Adds environment variables for the executor.\n  env: {}\n  # sets security context for the executor container\n  securityContext: {}\n\nserver:\n  enabled: true\n  # only updates base url of resources on client side,\n  # it's expected that a proxy server rewrites the request URL and gets rid of this prefix\n  # https://github.com/argoproj/argo/issues/716#issuecomment-433213190\n  baseHref: /\n  image:\n    # Overrides .images.tag if defined.\n    tag: \"\"\n  # optional map of annotations to be applied to the ui Pods\n  podAnnotations: {}\n  # Optional labels to add to the UI pods\n  podLabels: {}\n  # SecurityContext to set on the server pods\n  podSecurityContext: {}\n  name: server\n  serviceType: ClusterIP\n  servicePort: 2746\n  # servicePortName: http\n  serviceAccount: argo-server\n  # Whether to create the service account with the name specified in\n  # server.serviceAccount and bind it to the server role.\n  createServiceAccount: true\n  # Service account annotations\n  serviceAccountAnnotations: {}\n  # Annotations to be applied to the UI Service\n  serviceAnnotations: {}\n  # Optional labels to add to the UI Service\n  serviceLabels: {}\n  # Static IP address to assign to loadBalancer\n  # service type `LoadBalancer`\n  loadBalancerIP: \"\"\n  # Source ranges to allow access to service from. Only applies to\n  # service type `LoadBalancer`\n  loadBalancerSourceRanges: []\n  resources: {}\n  replicas: 1\n  pdb:\n    enabled: false\n    # minAvailable: 1\n    # maxUnavailable: 1\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n  tolerations: []\n  affinity: {}\n  # Leverage a PriorityClass to ensure your pods survive resource shortages\n  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/\n  # PriorityClass: system-cluster-critical\n  priorityClassName: \"\"\n\n  # Run the argo server in \"secure\" mode. Configure this value instead of\n  # \"--secure\" in extraArgs. See the following documentation for more details\n  # on secure mode:\n  # https://argoproj.github.io/argo/tls/#encrypted\n  secure: false\n\n  # Extra arguments to provide to the Argo server binary.\n  extraArgs: []\n\n  ## Additional volumes to the server main container.\n  volumeMounts: []\n  volumes: []\n\n  ## Ingress configuration.\n  ## ref: https://kubernetes.io/docs/user-guide/ingress/\n  ##\n  ingress:\n    enabled: false\n\n    ## Annotations to be added to the web ingress.\n    ##\n    # annotations:\n    #   kubernetes.io/ingress.class: nginx\n    #   kubernetes.io/tls-acme: \"true\"\n\n    ## Hostnames.\n    ## Must be provided if Ingress is enabled.\n    ##\n    # hosts:\n    #   - argo.domain.com\n\n    ## Additional Paths for each host\n    # paths:\n    #   - serviceName: \"ssl-redirect\"\n    #     servicePort: \"use-annotation\"\n\n    ## TLS configuration.\n    ## Secrets must be manually created in the namespace.\n    ##\n    # tls:\n    #   - secretName: argo-ui-tls\n    #     hosts:\n    #       - argo.domain.com\n  clusterWorkflowTemplates:\n    # Give the server permissions to edit ClusterWorkflowTemplates.\n    enableEditing: true\n  sso:\n    ## SSO configuration when SSO is specified as a server auth mode.\n    ## All the values are requied. SSO is activated by adding --auth-mode=sso\n    ## to the server command line.\n    #\n    ## The root URL of the OIDC identity provider.\n    # issuer: https://accounts.google.com\n    ## Name of a secret and a key in it to retrieve the app OIDC client ID from.\n    # clientId:\n    #   name: argo-server-sso\n    #   key: client-id\n    ## Name of a secret and a key in it to retrieve the app OIDC client secret from.\n    # clientSecret:\n    #   name: argo-server-sso\n    #   key: client-secret\n    ## The OIDC redirect URL. Should be in the form \u003cargo-root-url\u003e/oauth2/callback.\n    # redirectUrl: https://argo/oauth2/callback\n    # rbac:\n    #   enabled: true\n    ## When present, restricts secrets the server can read to a given list.\n    ## You can use it to restrict the server to only be able to access the\n    ## service account token secrets that are associated with service accounts\n    ## used for authorization.\n    #   secretWhitelist: []\n    ## Scopes requested from the SSO ID provider.  The 'groups' scope requests\n    ## group membership information, which is usually used for authorization\n    ## decisions.\n    # scopes:\n    # - groups\n\n# Influences the creation of the ConfigMap for the workflow-controller itself.\nuseDefaultArtifactRepo: false\nuseStaticCredentials: true\nartifactRepository:\n  # archiveLogs will archive the main container logs as an artifact\n  archiveLogs: false\n  s3:\n    # Note the `key` attribute is not the actual secret, it's the PATH to\n    # the contents in the associated secret, as defined by the `name` attribute.\n    accessKeySecret:\n      # name: \u003creleaseName\u003e-minio (default)\n      key: accesskey\n    secretKeySecret:\n      # name: \u003creleaseName\u003e-minio\n      key: secretkey\n    insecure: true\n    # bucket:\n    # endpoint:\n    # region:\n    # roleARN:\n    # useSDKCreds: true\n  # gcs:\n    # bucket: \u003cproject\u003e-argo\n    # keyFormat: \"{{workflow.namespace}}/{{workflow.name}}/\"\n    # serviceAccountKeySecret is a secret selector.\n    # It references the k8s secret named 'my-gcs-credentials'.\n    # This secret is expected to have have the key 'serviceAccountKey',\n    # containing the base64 encoded credentials\n    # to the bucket.\n    #\n    # If it's running on GKE and Workload Identity is used,\n    # serviceAccountKeySecret is not needed.\n    # serviceAccountKeySecret:\n      # name: my-gcs-credentials\n      # key: serviceAccountKey\n\n\n# NOTE: These are setting attributes for the `minio` optional dependency\nminio:\n  # If set to true then chart installs minio and generate according artifactRepository section in workflow controller config map\n  install: false\n  defaultBucket:\n    enabled: true\n    name: argo-artifacts"
            ],
            "verify": false,
            "version": "0.15.2",
            "wait": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "cicd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "cicd",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "cicd",
                "resource_version": "6580",
                "self_link": "",
                "uid": "817137ea-9891-47db-835b-cd345212ff8b"
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    }
  ]
}
