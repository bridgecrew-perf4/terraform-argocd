{
  "version": 4,
  "terraform_version": "0.14.5",
  "serial": 20,
  "lineage": "cc40805d-1539-be55-d43b-b1a40f2d4036",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argo-workflow",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "argo",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo-ci",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "v2.12.3",
                "chart": "argo",
                "name": "argo-ci",
                "namespace": "cicd",
                "revision": 1,
                "values": "{\"artifactRepository\":{\"archiveLogs\":false,\"s3\":{\"accessKeySecret\":{\"key\":\"accesskey\"},\"insecure\":true,\"secretKeySecret\":{\"key\":\"secretkey\"}}},\"controller\":{\"affinity\":{},\"containerRuntimeExecutor\":\"docker\",\"extraEnv\":[],\"image\":{\"tag\":\"\"},\"instanceID\":{\"enabled\":false},\"links\":[],\"loadBalancerSourceRanges\":[],\"logging\":{\"globallevel\":\"0\",\"level\":\"info\"},\"metricsConfig\":{\"enabled\":false,\"path\":\"/metrics\",\"port\":8080},\"metricsServicePort\":8080,\"metricsServicePortName\":\"metrics\",\"name\":\"workflow-controller\",\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"parallelism\":null,\"pdb\":{\"enabled\":false},\"persistence\":{},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":\"\",\"replicas\":1,\"resources\":{},\"serviceAccount\":\"argo\",\"serviceAccountAnnotations\":{},\"serviceAnnotations\":{},\"serviceLabels\":{},\"serviceMonitor\":{\"additionalLabels\":{},\"enabled\":false},\"serviceType\":\"ClusterIP\",\"telemetryConfig\":{\"enabled\":false,\"path\":\"/telemetry\",\"port\":8081},\"telemetryServicePort\":8081,\"telemetryServicePortName\":\"telemetry\",\"tolerations\":[],\"workflowDefaults\":{},\"workflowNamespaces\":[\"default\"],\"workflowRestrictions\":{}},\"crdVersion\":\"v1alpha1\",\"createAggregateRoles\":true,\"executor\":{\"env\":{},\"image\":{\"tag\":\"\"},\"resources\":{},\"securityContext\":{}},\"images\":{\"controller\":\"workflow-controller\",\"executor\":\"argoexec\",\"namespace\":\"argoproj\",\"pullPolicy\":\"Always\",\"pullSecrets\":[],\"server\":\"argocli\",\"tag\":\"v2.12.3\"},\"init\":{\"serviceAccount\":\"\"},\"installCRD\":true,\"minio\":{\"defaultBucket\":{\"enabled\":true,\"name\":\"argo-artifacts\"},\"install\":false},\"server\":{\"affinity\":{},\"baseHref\":\"/\",\"clusterWorkflowTemplates\":{\"enableEditing\":true},\"createServiceAccount\":true,\"enabled\":true,\"extraArgs\":[],\"image\":{\"tag\":\"\"},\"ingress\":{\"enabled\":false},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"name\":\"server\",\"nodeSelector\":{\"kubernetes.io/os\":\"linux\"},\"pdb\":{\"enabled\":false},\"podAnnotations\":{},\"podLabels\":{},\"podSecurityContext\":{},\"priorityClassName\":\"\",\"replicas\":1,\"resources\":{},\"secure\":false,\"serviceAccount\":\"argo-server\",\"serviceAccountAnnotations\":{},\"serviceAnnotations\":{},\"serviceLabels\":{},\"servicePort\":2746,\"serviceType\":\"ClusterIP\",\"sso\":null,\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"singleNamespace\":false,\"useDefaultArtifactRepo\":false,\"useStaticCredentials\":true,\"workflow\":{\"namespace\":\"\",\"rbac\":{\"create\":false},\"serviceAccount\":{\"annotations\":{},\"create\":false,\"name\":\"argo-workflow\"}}}",
                "version": "0.15.2"
              }
            ],
            "name": "argo-ci",
            "namespace": "cicd",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "images:\n  namespace: argoproj\n  controller: workflow-controller\n  server: argocli\n  executor: argoexec\n  pullPolicy: Always\n  # Secrets with credentials to pull images from a private registry\n  pullSecrets: []\n  # - name: argo-pull-secret\n  tag: v2.12.3\n\ncrdVersion: v1alpha1\ninstallCRD: true\n\ninit:\n  # By default the installation will not set an explicit one, which will mean it uses `default` for the namespace the chart is\n  # being deployed to.  In RBAC clusters, that will almost certainly fail.  See the NOTES: section of the readme for more info.\n  serviceAccount: \"\"\n\ncreateAggregateRoles: true\n\n# Restrict Argo to only deploy into a single namespace by apply Roles and RoleBindings instead of the Cluster equivalents,\n# and start argo-cli with the --namespaced flag. Use it in clusters with strict access policy.\nsingleNamespace: false\n\nworkflow:\n  namespace: \"\"  # Specify namespace if workflows run in another namespace than argo. This controls where the service account and RBAC resources will be created.\n  serviceAccount:\n    create: false  # Specifies whether a service account should be created\n    annotations: {}\n    name: \"argo-workflow\"  # Service account which is used to run workflows\n  rbac:\n    create: false  # adds Role and RoleBinding for the above specified service account to be able to run workflows\n\ncontroller:\n  image:\n    # Overrides .images.tag if defined.\n    tag: \"\"\n  # parallelism dictates how many workflows can be running at the same time\n  parallelism:\n  # podAnnotations is an optional map of annotations to be applied to the controller Pods\n  podAnnotations: {}\n  # Optional labels to add to the controller pods\n  podLabels: {}\n  # SecurityContext to set on the controller pods\n  podSecurityContext: {}\n  # podPortName: http\n  metricsConfig:\n    enabled: false\n    path: /metrics\n    port: 8080\n  persistence: {}\n  # connectionPool:\n  #   maxIdleConns: 100\n  #   maxOpenConns: 0\n  # # save the entire workflow into etcd and DB\n  # nodeStatusOffLoad: false\n  # # enable archiving of old workflows\n  # archive: false\n  # postgresql:\n  #   host: localhost\n  #   port: 5432\n  #   database: postgres\n  #   tableName: argo_workflows\n  #   # the database secrets must be in the same namespace of the controller\n  #   userNameSecret:\n  #     name: argo-postgres-config\n  #     key: username\n  #   passwordSecret:\n  #     name: argo-postgres-config\n  #     key: password\n  workflowDefaults: {}  # Only valid for 2.7+\n  #  spec:\n  #    ttlStrategy:\n  #      secondsAfterCompletion: 84600\n  # workflowWorkers: 32\n  # podWorkers: 32\n  workflowRestrictions: {}  # Only valid for 2.9+\n  #  templateReferencing: Strict|Secure\n  telemetryConfig:\n    enabled: false\n    path: /telemetry\n    port: 8081\n  serviceMonitor:\n    enabled: false\n    additionalLabels: {}\n  serviceAccount: argo\n  # Service account annotations\n  serviceAccountAnnotations: {}\n  name: workflow-controller\n  workflowNamespaces:\n    - default\n  containerRuntimeExecutor: docker\n  instanceID:\n    # `instanceID.enabled` configures the controller to filter workflow submissions\n    # to only those which have a matching instanceID attribute.\n    enabled: false\n    # NOTE: If `instanceID.enabled` is set to `true` then either `instanceID.userReleaseName`\n    # or `instanceID.explicitID` must be defined.\n    # useReleaseName: true\n    # explicitID: unique-argo-controller-identifier\n  logging:\n    level: info\n    globallevel: \"0\"\n  serviceType: ClusterIP\n  metricsServicePort: 8080\n  metricsServicePortName: metrics\n  telemetryServicePort: 8081\n  telemetryServicePortName: telemetry\n  # Annotations to be applied to the controller Service\n  serviceAnnotations: {}\n  # Optional labels to add to the controller Service\n  serviceLabels: {}\n  # Source ranges to allow access to service from. Only applies to\n  # service type `LoadBalancer`\n  loadBalancerSourceRanges: []\n  resources: {}\n  # The list of environment variable definitions to be added to the controller\n  # manages container verbatim.\n  extraEnv: []\n  replicas: 1\n  pdb:\n    enabled: false\n    # minAvailable: 1\n    # maxUnavailable: 1\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n  tolerations: []\n  affinity: {}\n  # Leverage a PriorityClass to ensure your pods survive resource shortages\n  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/\n  # PriorityClass: system-cluster-critical\n  priorityClassName: \"\"\n  # https://argoproj.github.io/argo/links/\n  links: []\n\n# executor controls how the init and wait container should be customized\nexecutor:\n  image:\n    # Overrides .images.tag if defined.\n    tag: \"\"\n  resources: {}\n  # Adds environment variables for the executor.\n  env: {}\n  # sets security context for the executor container\n  securityContext: {}\n\nserver:\n  enabled: true\n  # only updates base url of resources on client side,\n  # it's expected that a proxy server rewrites the request URL and gets rid of this prefix\n  # https://github.com/argoproj/argo/issues/716#issuecomment-433213190\n  baseHref: /\n  image:\n    # Overrides .images.tag if defined.\n    tag: \"\"\n  # optional map of annotations to be applied to the ui Pods\n  podAnnotations: {}\n  # Optional labels to add to the UI pods\n  podLabels: {}\n  # SecurityContext to set on the server pods\n  podSecurityContext: {}\n  name: server\n  serviceType: ClusterIP\n  servicePort: 2746\n  # servicePortName: http\n  serviceAccount: argo-server\n  # Whether to create the service account with the name specified in\n  # server.serviceAccount and bind it to the server role.\n  createServiceAccount: true\n  # Service account annotations\n  serviceAccountAnnotations: {}\n  # Annotations to be applied to the UI Service\n  serviceAnnotations: {}\n  # Optional labels to add to the UI Service\n  serviceLabels: {}\n  # Static IP address to assign to loadBalancer\n  # service type `LoadBalancer`\n  loadBalancerIP: \"\"\n  # Source ranges to allow access to service from. Only applies to\n  # service type `LoadBalancer`\n  loadBalancerSourceRanges: []\n  resources: {}\n  replicas: 1\n  pdb:\n    enabled: false\n    # minAvailable: 1\n    # maxUnavailable: 1\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector:\n    kubernetes.io/os: linux\n  tolerations: []\n  affinity: {}\n  # Leverage a PriorityClass to ensure your pods survive resource shortages\n  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/\n  # PriorityClass: system-cluster-critical\n  priorityClassName: \"\"\n\n  # Run the argo server in \"secure\" mode. Configure this value instead of\n  # \"--secure\" in extraArgs. See the following documentation for more details\n  # on secure mode:\n  # https://argoproj.github.io/argo/tls/#encrypted\n  secure: false\n\n  # Extra arguments to provide to the Argo server binary.\n  extraArgs: []\n\n  ## Additional volumes to the server main container.\n  volumeMounts: []\n  volumes: []\n\n  ## Ingress configuration.\n  ## ref: https://kubernetes.io/docs/user-guide/ingress/\n  ##\n  ingress:\n    enabled: false\n\n    ## Annotations to be added to the web ingress.\n    ##\n    # annotations:\n    #   kubernetes.io/ingress.class: nginx\n    #   kubernetes.io/tls-acme: \"true\"\n\n    ## Hostnames.\n    ## Must be provided if Ingress is enabled.\n    ##\n    # hosts:\n    #   - argo.domain.com\n\n    ## Additional Paths for each host\n    # paths:\n    #   - serviceName: \"ssl-redirect\"\n    #     servicePort: \"use-annotation\"\n\n    ## TLS configuration.\n    ## Secrets must be manually created in the namespace.\n    ##\n    # tls:\n    #   - secretName: argo-ui-tls\n    #     hosts:\n    #       - argo.domain.com\n  clusterWorkflowTemplates:\n    # Give the server permissions to edit ClusterWorkflowTemplates.\n    enableEditing: true\n  sso:\n    ## SSO configuration when SSO is specified as a server auth mode.\n    ## All the values are requied. SSO is activated by adding --auth-mode=sso\n    ## to the server command line.\n    #\n    ## The root URL of the OIDC identity provider.\n    # issuer: https://accounts.google.com\n    ## Name of a secret and a key in it to retrieve the app OIDC client ID from.\n    # clientId:\n    #   name: argo-server-sso\n    #   key: client-id\n    ## Name of a secret and a key in it to retrieve the app OIDC client secret from.\n    # clientSecret:\n    #   name: argo-server-sso\n    #   key: client-secret\n    ## The OIDC redirect URL. Should be in the form \u003cargo-root-url\u003e/oauth2/callback.\n    # redirectUrl: https://argo/oauth2/callback\n    # rbac:\n    #   enabled: true\n    ## When present, restricts secrets the server can read to a given list.\n    ## You can use it to restrict the server to only be able to access the\n    ## service account token secrets that are associated with service accounts\n    ## used for authorization.\n    #   secretWhitelist: []\n    ## Scopes requested from the SSO ID provider.  The 'groups' scope requests\n    ## group membership information, which is usually used for authorization\n    ## decisions.\n    # scopes:\n    # - groups\n\n# Influences the creation of the ConfigMap for the workflow-controller itself.\nuseDefaultArtifactRepo: false\nuseStaticCredentials: true\nartifactRepository:\n  # archiveLogs will archive the main container logs as an artifact\n  archiveLogs: false\n  s3:\n    # Note the `key` attribute is not the actual secret, it's the PATH to\n    # the contents in the associated secret, as defined by the `name` attribute.\n    accessKeySecret:\n      # name: \u003creleaseName\u003e-minio (default)\n      key: accesskey\n    secretKeySecret:\n      # name: \u003creleaseName\u003e-minio\n      key: secretkey\n    insecure: true\n    # bucket:\n    # endpoint:\n    # region:\n    # roleARN:\n    # useSDKCreds: true\n  # gcs:\n    # bucket: \u003cproject\u003e-argo\n    # keyFormat: \"{{workflow.namespace}}/{{workflow.name}}/\"\n    # serviceAccountKeySecret is a secret selector.\n    # It references the k8s secret named 'my-gcs-credentials'.\n    # This secret is expected to have have the key 'serviceAccountKey',\n    # containing the base64 encoded credentials\n    # to the bucket.\n    #\n    # If it's running on GKE and Workload Identity is used,\n    # serviceAccountKeySecret is not needed.\n    # serviceAccountKeySecret:\n      # name: my-gcs-credentials\n      # key: serviceAccountKey\n\n\n# NOTE: These are setting attributes for the `minio` optional dependency\nminio:\n  # If set to true then chart installs minio and generate according artifactRepository section in workflow controller config map\n  install: false\n  defaultBucket:\n    enabled: true\n    name: argo-artifacts"
            ],
            "verify": false,
            "version": "0.15.2",
            "wait": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "argocd",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "atomic": false,
            "chart": "argo-cd",
            "cleanup_on_fail": false,
            "create_namespace": false,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "argo-cd",
            "keyring": null,
            "lint": false,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.7.6",
                "chart": "argo-cd",
                "name": "argo-cd",
                "namespace": "kube-system",
                "revision": 1,
                "values": "{\"configs\":{\"knownHosts\":{\"data\":{\"ssh_known_hosts\":\"bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\\n\"}},\"knownHostsAnnotations\":{},\"repositoryCredentials\":{},\"secret\":{\"annotations\":{},\"argocdServerTlsConfig\":{},\"bitbucketServerSecret\":\"\",\"bitbucketUUID\":\"\",\"createSecret\":true,\"extra\":{},\"githubSecret\":\"\",\"gitlabSecret\":\"\",\"gogsSecret\":\"\"},\"tlsCerts\":{},\"tlsCertsAnnotations\":{}},\"controller\":{\"affinity\":{},\"args\":{\"appResyncPeriod\":\"180\",\"operationProcessors\":\"10\",\"statusProcessors\":\"20\"},\"clusterAdminAccess\":{\"enabled\":true},\"containerPort\":8082,\"containerSecurityContext\":{},\"enableStatefulSet\":false,\"env\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"rules\":{\"enabled\":false,\"spec\":[]},\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8082},\"serviceMonitor\":{\"enabled\":false}},\"name\":\"application-controller\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":8082,\"portName\":\"https-controller\"},\"serviceAccount\":{\"annotations\":{},\"create\":true,\"name\":\"argocd-application-controller\"},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"dex\":{\"affinity\":{},\"containerPortGrpc\":5557,\"containerPortHttp\":5556,\"containerPortMetrics\":5558,\"containerSecurityContext\":{},\"enabled\":true,\"env\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"quay.io/dexidp/dex\",\"tag\":\"v2.22.0\"},\"initImage\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{}},\"serviceMonitor\":{\"enabled\":false}},\"name\":\"dex-server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"serviceAccount\":{\"create\":true,\"name\":\"argocd-dex-server\"},\"servicePortGrpc\":5557,\"servicePortHttp\":5556,\"servicePortMetrics\":5558,\"tolerations\":[],\"volumeMounts\":[{\"mountPath\":\"/shared\",\"name\":\"static-files\"}],\"volumes\":[{\"emptyDir\":{},\"name\":\"static-files\"}]},\"fullnameOverride\":\"\",\"global\":{\"hostAliases\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"argoproj/argocd\",\"tag\":\"v1.7.6\"},\"imagePullSecrets\":[],\"securityContext\":{}},\"installCRDs\":true,\"nameOverride\":\"argocd\",\"openshift\":{\"enabled\":false},\"redis\":{\"affinity\":{},\"containerPort\":6379,\"containerSecurityContext\":{},\"enabled\":true,\"env\":[],\"image\":{\"imagePullPolicy\":\"IfNotPresent\",\"repository\":\"redis\",\"tag\":\"5.0.8\"},\"name\":\"redis\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"resources\":{},\"securityContext\":{\"fsGroup\":1000,\"runAsGroup\":1000,\"runAsNonRoot\":true,\"runAsUser\":1000},\"servicePort\":6379,\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"redis-ha\":{\"enabled\":false,\"exporter\":{\"enabled\":true},\"haproxy\":{\"enabled\":true,\"metrics\":{\"enabled\":true}},\"image\":{\"tag\":\"5.0.8-alpine\"},\"persistentVolume\":{\"enabled\":false},\"redis\":{\"config\":{\"save\":\"\\\"\\\"\"},\"masterGroupName\":\"argocd\"}},\"repoServer\":{\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":5,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"containerPort\":8081,\"containerSecurityContext\":{},\"env\":[],\"extraArgs\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8084},\"serviceMonitor\":{\"enabled\":false}},\"name\":\"repo-server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"service\":{\"annotations\":{},\"labels\":{},\"port\":8081,\"portName\":\"https-repo-server\"},\"serviceAccount\":{\"annotations\":{},\"create\":false},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]},\"server\":{\"GKEbackendConfig\":{\"enabled\":false,\"spec\":{}},\"additionalApplications\":[],\"additionalProjects\":[],\"affinity\":{},\"autoscaling\":{\"enabled\":false,\"maxReplicas\":5,\"minReplicas\":1,\"targetCPUUtilizationPercentage\":50,\"targetMemoryUtilizationPercentage\":50},\"certificate\":{\"additionalHosts\":[],\"domain\":\"argocd.example.com\",\"enabled\":false,\"issuer\":{}},\"clusterAdminAccess\":{\"enabled\":true},\"config\":{\"application.instanceLabelKey\":\"argocd.argoproj.io/instance\",\"url\":\"https://argocd.example.com\"},\"configAnnotations\":{},\"containerPort\":8080,\"containerSecurityContext\":{},\"env\":[],\"extraArgs\":[],\"extraContainers\":[],\"image\":{\"imagePullPolicy\":null,\"repository\":null,\"tag\":null},\"ingress\":{\"annotations\":{},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"https\":false,\"labels\":{},\"paths\":[\"/\"],\"tls\":[]},\"ingressGrpc\":{\"annotations\":{},\"enabled\":false,\"extraPaths\":[],\"hosts\":[],\"https\":false,\"labels\":{},\"paths\":[\"/\"],\"tls\":[]},\"livenessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"logFormat\":\"text\",\"logLevel\":\"info\",\"metrics\":{\"enabled\":false,\"service\":{\"annotations\":{},\"labels\":{},\"servicePort\":8083},\"serviceMonitor\":{\"enabled\":false}},\"name\":\"server\",\"nodeSelector\":{},\"podAnnotations\":{},\"podLabels\":{},\"priorityClassName\":\"\",\"rbacConfig\":{},\"rbacConfigAnnotations\":{},\"readinessProbe\":{\"failureThreshold\":3,\"initialDelaySeconds\":10,\"periodSeconds\":10,\"successThreshold\":1,\"timeoutSeconds\":1},\"replicas\":1,\"resources\":{},\"route\":{\"enabled\":false,\"hostname\":\"\"},\"service\":{\"annotations\":{},\"labels\":{},\"loadBalancerIP\":\"\",\"loadBalancerSourceRanges\":[],\"namedTargetPort\":true,\"servicePortHttp\":80,\"servicePortHttpName\":\"http\",\"servicePortHttps\":443,\"servicePortHttpsName\":\"https\",\"type\":\"ClusterIP\"},\"serviceAccount\":{\"annotations\":{},\"create\":true,\"name\":\"argocd-server\"},\"tolerations\":[],\"volumeMounts\":[],\"volumes\":[]}}",
                "version": "2.11.2"
              }
            ],
            "name": "argo-cd",
            "namespace": "kube-system",
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://argoproj.github.io/argo-helm",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": [
              "## ArgoCD configuration\n## Ref: https://github.com/argoproj/argo-cd\n##\nnameOverride: argocd\nfullnameOverride: \"\"\n\n# Optional CRD installation for those without Helm hooks\ninstallCRDs: true\n\nglobal:\n  image:\n    repository: argoproj/argocd\n    tag: v1.7.6\n    imagePullPolicy: IfNotPresent\n  securityContext: {}\n  #  runAsUser: 999\n  #  runAsGroup: 999\n  #  fsGroup: 999\n  imagePullSecrets: []\n  hostAliases: []\n  # - ip: 10.20.30.40\n  #   hostnames:\n  #   - git.myhostname\n\n## Controller\ncontroller:\n  name: application-controller\n\n  image:\n    repository: # argoproj/argocd\n    tag: # v1.7.6\n    imagePullPolicy: # IfNotPresent\n\n  # If changing the number of replicas you must pass the number as ARGOCD_CONTROLLER_REPLICAS as an environment variable\n  replicas: 1\n\n  # Deploy the application as a StatefulSet instead of a Deployment, this is required for HA capability.\n  # This is a feature flag that will become the default in chart version 3.x\n  enableStatefulSet: false\n\n  ## Argo controller commandline flags\n  args:\n    statusProcessors: \"20\"\n    operationProcessors: \"10\"\n    appResyncPeriod: \"180\"\n\n  ## Argo controller log format: text|json\n  logFormat: text\n  ## Argo controller log level\n  logLevel: info\n\n  ## Additional command line arguments to pass to argocd-controller\n  ##\n  extraArgs: []\n\n  ## Environment variables to pass to argocd-controller\n  ##\n  env:\n    []\n    # - name: \"ARGOCD_CONTROLLER_REPLICAS\"\n    #   value: \"\"\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to controller pods\n  ##\n  podLabels: {}\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n\n  ## Configures the controller port\n  containerPort: 8082\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the controller main container.\n  volumeMounts: []\n\n  ## Additional volumes to the controller pod.\n  volumes: []\n\n  ## Controller service configuration\n  service:\n    annotations: {}\n    labels: {}\n    port: 8082\n    portName: https-controller\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  resources: {}\n  #  limits:\n  #    cpu: 500m\n  #    memory: 512Mi\n  #  requests:\n  #    cpu: 250m\n  #    memory: 256Mi\n\n  serviceAccount:\n    create: true\n    name: argocd-application-controller\n    ## Annotations applied to created service account\n    annotations: {}\n\n  ## Server metrics controller configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8082\n    serviceMonitor:\n      enabled: false\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n    rules:\n      enabled: false\n      spec: []\n      # - alert: ArgoAppMissing\n      #   expr: |\n      #     absent(argocd_app_info)\n      #   for: 15m\n      #   labels:\n      #     severity: critical\n      #   annotations:\n      #     summary: \"[ArgoCD] No reported applications\"\n      #     description: \u003e\n      #       ArgoCD has not reported any applications data for the past 15 minutes which\n      #       means that it must be down or not functioning properly.  This needs to be\n      #       resolved for this cloud to continue to maintain state.\n      # - alert: ArgoAppNotSynced\n      #   expr: |\n      #     argocd_app_sync_status{sync_status!=\"Synced\"} == 1\n      #   for: 12h\n      #   labels:\n      #     severity: warning\n      #   annotations:\n      #     summary: \"[{{`{{$labels.name}}`}}] Application not synchronized\"\n      #     description: \u003e\n      #       The application [{{`{{$labels.name}}`}} has not been synchronized for over\n      #       12 hours which means that the state of this cloud has drifted away from the\n      #       state inside Git.\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  ## Enable Admin ClusterRole resources.\n  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.\n  clusterAdminAccess:\n    enabled: true\n\n## Dex\ndex:\n  enabled: true\n  name: dex-server\n\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n    serviceMonitor:\n      enabled: false\n\n  image:\n    repository: quay.io/dexidp/dex\n    tag: v2.22.0\n    imagePullPolicy: IfNotPresent\n  initImage:\n    repository:\n    tag:\n    imagePullPolicy:\n\n  ## Environment variables to pass to the Dex server\n  ##\n  env: []\n\n  ## Annotations to be added to the Dex server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to the Dex server pods\n  ##\n  podLabels: {}\n\n  serviceAccount:\n    create: true\n    name: argocd-dex-server\n\n  ## Additional volumeMounts to the controller main container.\n  volumeMounts:\n    - name: static-files\n      mountPath: /shared\n\n  ## Additional volumes to the controller pod.\n  volumes:\n    - name: static-files\n      emptyDir: {}\n\n  ## Dex deployment container ports\n  containerPortHttp: 5556\n  servicePortHttp: 5556\n  containerPortGrpc: 5557\n  servicePortGrpc: 5557\n  containerPortMetrics: 5558\n  servicePortMetrics: 5558\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n\n  resources: {}\n  #  limits:\n  #    cpu: 50m\n  #    memory: 64Mi\n  #  requests:\n  #    cpu: 10m\n  #    memory: 32Mi\n\n## Redis\nredis:\n  enabled: true\n  name: redis\n\n  image:\n    repository: redis\n    tag: 5.0.8\n    imagePullPolicy: IfNotPresent\n\n  containerPort: 6379\n  servicePort: 6379\n\n  ## Environment variables to pass to the Redis server\n  ##\n  env: []\n\n  ## Annotations to be added to the Redis server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to the Redis server pods\n  ##\n  podLabels: {}\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n\n  ## Redis Pod specific security context\n  securityContext:\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n    runAsNonRoot: true\n\n  resources: {}\n  #  limits:\n  #    cpu: 200m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 100m\n  #    memory: 64Mi\n\n  volumeMounts: []\n  volumes: []\n\n# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)\n# the custom redis deployment is omitted\nredis-ha:\n  enabled: false\n  # Check the redis-ha chart for more properties\n  exporter:\n    enabled: true\n  persistentVolume:\n    enabled: false\n  redis:\n    masterGroupName: argocd\n    config:\n      save: '\"\"'\n  haproxy:\n    enabled: true\n    metrics:\n      enabled: true\n  image:\n    tag: 5.0.8-alpine\n\n## Server\nserver:\n  name: server\n\n  replicas: 1\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 5\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  image:\n    repository: # argoproj/argocd\n    tag: # v1.7.6\n    imagePullPolicy: # IfNotPresent\n\n  ## Additional command line arguments to pass to argocd-server\n  ##\n  extraArgs: []\n  #  - --insecure\n\n  ## Environment variables to pass to argocd-server\n  ##\n  env: []\n\n  ## Argo server log format: text|json\n  logFormat: text\n  ## Argo server log level\n  logLevel: info\n\n  ## Annotations to be added to controller pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to controller pods\n  ##\n  podLabels: {}\n\n  ## Configures the server port\n  containerPort: 8080\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the server main container.\n  volumeMounts: []\n\n  ## Additional volumes to the controller pod.\n  volumes: []\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n\n  resources: {}\n  #  limits:\n  #    cpu: 100m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 50m\n  #    memory: 64Mi\n\n  ## Certificate configuration\n  certificate:\n    enabled: false\n    domain: argocd.example.com\n    issuer: {}\n    additionalHosts: []\n\n  ## Server service configuration\n  service:\n    annotations: {}\n    labels: {}\n    type: ClusterIP\n    servicePortHttp: 80\n    servicePortHttps: 443\n    servicePortHttpName: http\n    servicePortHttpsName: https\n    namedTargetPort: true\n    loadBalancerIP: \"\"\n    loadBalancerSourceRanges: []\n\n  ## Server metrics service configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8083\n    serviceMonitor:\n      enabled: false\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  serviceAccount:\n    create: true\n    name: argocd-server\n    ## Annotations applied to created service account\n    annotations: {}\n\n  ingress:\n    enabled: false\n    annotations: {}\n    labels: {}\n\n    ## Argo Ingress.\n    ## Hostnames must be provided if Ingress is enabled.\n    ## Secrets must be manually created in the namespace\n    ##\n    hosts:\n      []\n      # - argocd.example.com\n    paths:\n      - /\n    extraPaths:\n      []\n      # - path: /*\n      #   backend:\n      #     serviceName: ssl-redirect\n      #     servicePort: use-annotation\n    tls:\n      []\n      # - secretName: argocd-example-tls\n      #   hosts:\n      #     - argocd.example.com\n    https: false\n  # dedicated ingess for gRPC as documented at\n  # https://argoproj.github.io/argo-cd/operator-manual/ingress/\n  ingressGrpc:\n    enabled: false\n    annotations: {}\n    labels: {}\n\n    ## Argo Ingress.\n    ## Hostnames must be provided if Ingress is enabled.\n    ## Secrets must be manually created in the namespace\n    ##\n    hosts:\n      []\n      # - argocd.example.com\n    paths:\n      - /\n    extraPaths:\n      []\n      # - path: /*\n      #   backend:\n      #     serviceName: ssl-redirect\n      #     servicePort: use-annotation\n    tls:\n      []\n      # - secretName: argocd-example-tls\n      #   hosts:\n      #     - argocd.example.com\n    https: false\n\n  # Create a OpenShift Route with SSL passthrough for UI and CLI\n  # Consider setting 'hostname' e.g. https://argocd.apps-crc.testing/ using your Default Ingress Controller Domain\n  # Find your domain with: kubectl describe --namespace=openshift-ingress-operator ingresscontroller/default | grep Domain:\n  # If 'hostname' is an empty string \"\" OpenShift will create a hostname for you.\n  route:\n    enabled: false\n    hostname: \"\"\n\n  ## ArgoCD config\n  ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml\n  config:\n    # Argo CD's externally facing base URL (optional). Required when configuring SSO\n    url: https://argocd.example.com\n    # Argo CD instance label key\n    application.instanceLabelKey: argocd.argoproj.io/instance\n    # repositories: |\n    #   - url: git@github.com:group/repo.git\n    #     sshPrivateKeySecret:\n    #       name: secret-name\n    #       key: sshPrivateKey\n    #   - type: helm\n    #     url: https://kubernetes-charts.storage.googleapis.com\n    #     name: stable\n    #   - type: helm\n    #     url: https://argoproj.github.io/argo-helm\n    #     name: argo\n    # oidc.config: |\n    #   name: AzureAD\n    #   issuer: https://login.microsoftonline.com/TENANT_ID/v2.0\n    #   clientID: CLIENT_ID\n    #   clientSecret: $oidc.azuread.clientSecret\n    #   requestedIDTokenClaims:\n    #     groups:\n    #       essential: true\n    #   requestedScopes:\n    #     - openid\n    #     - profile\n    #     - email\n\n  ## Annotations to be added to ArgoCD ConfigMap\n  configAnnotations: {}\n\n  ## ArgoCD rbac config\n  ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md\n  rbacConfig:\n    {}\n    # policy.csv is an file containing user-defined RBAC policies and role definitions (optional).\n    # Policy rules are in the form:\n    #   p, subject, resource, action, object, effect\n    # Role definitions and bindings are in the form:\n    #   g, subject, inherited-subject\n    # See https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md for additional information.\n    # policy.csv: |\n    #   # Grant all members of the group 'my-org:team-alpha; the ability to sync apps in 'my-project'\n    #   p, my-org:team-alpha, applications, sync, my-project/*, allow\n    #   # Grant all members of 'my-org:team-beta' admins\n    #   g, my-org:team-beta, role:admin\n    # policy.default is the name of the default role which Argo CD will falls back to, when\n    # authorizing API requests (optional). If omitted or empty, users may be still be able to login,\n    # but will see no apps, projects, etc...\n    # policy.default: role:readonly\n    # scopes controls which OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).\n    # If omitted, defaults to: '[groups]'. The scope value can be a string, or a list of strings.\n    # scopes: '[cognito:groups, email]'\n\n  ## Annotations to be added to ArgoCD rbac ConfigMap\n  rbacConfigAnnotations: {}\n\n  ## Not well tested and not well supported on release v1.0.0.\n  ## Applications\n  ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/\n  additionalApplications: []\n  # - name: guestbook\n  #   namespace: argocd\n  #   additionalLabels: {}\n  #   additionalAnnotations: {}\n  #   project: guestbook\n  #   source:\n  #     repoURL: https://github.com/argoproj/argocd-example-apps.git\n  #     targetRevision: HEAD\n  #     path: guestbook\n  #     directory:\n  #       recurse: true\n  #  destination:\n  #     server: https://kubernetes.default.svc\n  #     namespace: guestbook\n  #  syncPolicy:\n  #    automated:\n  #      prune: false\n  #      selfHeal: false\n\n  ## Projects\n  ## reference: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/\n  additionalProjects: []\n  # - name: guestbook\n  #   namespace: argocd\n  #   additionalLabels: {}\n  #   additionalAnnotations: {}\n  #   description: Example Project\n  #   sourceRepos:\n  #   - '*'\n  #   destinations:\n  #   - namespace: guestbook\n  #     server: https://kubernetes.default.svc\n  #   clusterResourceWhitelist: []\n  #   namespaceResourceBlacklist:\n  #   - group: ''\n  #     kind: ResourceQuota\n  #   - group: ''\n  #     kind: LimitRange\n  #   - group: ''\n  #     kind: NetworkPolicy\n  #     orphanedResources: {}\n  #     roles: []\n  #   namespaceResourceWhitelist:\n  #   - group: 'apps'\n  #     kind: Deployment\n  #   - group: 'apps'\n  #     kind: StatefulSet\n  #   orphanedResources: {}\n  #   roles: []\n  #   syncWindows:\n  #   - kind: allow\n  #     schedule: '10 1 * * *'\n  #     duration: 1h\n  #     applications:\n  #     - '*-prod'\n  #     manualSync: true\n\n  ## Enable Admin ClusterRole resources.\n  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.\n  clusterAdminAccess:\n    enabled: true\n\n  ## Enable BackendConfig custom resource for Google Kubernetes Engine\n  GKEbackendConfig:\n    enabled: false\n    spec: {}\n  #  spec:\n  #    iap:\n  #      enabled: true\n  #      oauthclientCredentials:\n  #        secretName: argocd-secret\n\n  extraContainers: []\n  ## Additional containers to be added to the controller pod.\n  ## See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.\n  # - name: my-sidecar\n  #   image: nginx:latest\n  # - name: lemonldap-ng-controller\n  #   image: lemonldapng/lemonldap-ng-controller:0.2.0\n  #   args:\n  #     - /lemonldap-ng-controller\n  #     - --alsologtostderr\n  #     - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration\n  #   env:\n  #     - name: POD_NAME\n  #       valueFrom:\n  #         fieldRef:\n  #           fieldPath: metadata.name\n  #     - name: POD_NAMESPACE\n  #       valueFrom:\n  #         fieldRef:\n  #           fieldPath: metadata.namespace\n  #   volumeMounts:\n  #   - name: copy-portal-skins\n  #     mountPath: /srv/var/lib/lemonldap-ng/portal/skins\n\n## Repo Server\nrepoServer:\n  name: repo-server\n\n  replicas: 1\n\n  autoscaling:\n    enabled: false\n    minReplicas: 1\n    maxReplicas: 5\n    targetCPUUtilizationPercentage: 50\n    targetMemoryUtilizationPercentage: 50\n\n  image:\n    repository: # argoproj/argocd\n    tag: # v1.7.6\n    imagePullPolicy: # IfNotPresent\n\n  ## Additional command line arguments to pass to argocd-repo-server\n  ##\n  extraArgs: []\n\n  ## Environment variables to pass to argocd-repo-server\n  ##\n  env: []\n\n  ## Argo repoServer log format: text|json\n  logFormat: text\n  ## Argo repoServer log level\n  logLevel: info\n\n  ## Annotations to be added to repo server pods\n  ##\n  podAnnotations: {}\n\n  ## Labels to be added to repo server pods\n  ##\n  podLabels: {}\n\n  ## Configures the repo server port\n  containerPort: 8081\n\n  ## Readiness and liveness probes for default backend\n  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/\n  ##\n  readinessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n  livenessProbe:\n    failureThreshold: 3\n    initialDelaySeconds: 10\n    periodSeconds: 10\n    successThreshold: 1\n    timeoutSeconds: 1\n\n  ## Additional volumeMounts to the repo server main container.\n  volumeMounts: []\n\n  ## Additional volumes to the repo server pod.\n  volumes: []\n\n  ## Node selectors and tolerations for server scheduling to nodes with taints\n  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/\n  ##\n  nodeSelector: {}\n  tolerations: []\n  affinity: {}\n\n  priorityClassName: \"\"\n\n  ## Labels to set container specific security contexts\n  containerSecurityContext:\n    {}\n    # capabilities:\n    #   drop:\n    #     - all\n\n  resources: {}\n  #  limits:\n  #    cpu: 50m\n  #    memory: 128Mi\n  #  requests:\n  #    cpu: 10m\n  #    memory: 64Mi\n\n  ## Repo server service configuration\n  service:\n    annotations: {}\n    labels: {}\n    port: 8081\n    portName: https-repo-server\n\n  ## Repo server metrics service configuration\n  metrics:\n    enabled: false\n    service:\n      annotations: {}\n      labels: {}\n      servicePort: 8084\n    serviceMonitor:\n      enabled: false\n    #   selector:\n    #     prometheus: kube-prometheus\n    #   namespace: monitoring\n    #   additionalLabels: {}\n\n  ## Repo server service account\n  ## If create is set to true, make sure to uncomment the name and update the rbac section below\n  serviceAccount:\n    create: false\n    #  name: argocd-repo-server\n    ## Annotations applied to created service account\n    annotations: {}\n\n  ## Repo server rbac rules\n  # rbac:\n  #   - apiGroups:\n  #     - argoproj.io\n  #     resources:\n  #     - applications\n  #     verbs:\n  #     - get\n  #     - list\n  #     - watch\n\n  ## Use init containers to configure custom tooling\n  ## https://argoproj.github.io/argo-cd/operator-manual/custom_tools/\n  ## When using the volumes \u0026 volumeMounts section bellow, please comment out those above.\n  #  volumes:\n  #  - name: custom-tools\n  #    emptyDir: {}\n  #\n  #  initContainers:\n  #  - name: download-tools\n  #    image: alpine:3.8\n  #    command: [sh, -c]\n  #    args:\n  #      - wget -qO- https://get.helm.sh/helm-v2.16.1-linux-amd64.tar.gz | tar -xvzf - \u0026\u0026\n  #        mv linux-amd64/helm /custom-tools/\n  #    volumeMounts:\n  #      - mountPath: /custom-tools\n  #        name: custom-tools\n  #  volumeMounts:\n  #  - mountPath: /usr/local/bin/helm\n  #    name: custom-tools\n  #    subPath: helm\n\n## Argo Configs\nconfigs:\n  knownHostsAnnotations: {}\n  knownHosts:\n    data:\n      ssh_known_hosts: |\n        bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\n        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\n        gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\n        gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\n        gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\n        ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n        vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n  tlsCertsAnnotations: {}\n  tlsCerts:\n    {}\n    # data:\n    #   argocd.example.com: |\n    #     -----BEGIN CERTIFICATE-----\n    #     MIIF1zCCA7+gAwIBAgIUQdTcSHY2Sxd3Tq/v1eIEZPCNbOowDQYJKoZIhvcNAQEL\n    #     BQAwezELMAkGA1UEBhMCREUxFTATBgNVBAgMDExvd2VyIFNheG9ueTEQMA4GA1UE\n    #     BwwHSGFub3ZlcjEVMBMGA1UECgwMVGVzdGluZyBDb3JwMRIwEAYDVQQLDAlUZXN0\n    #     c3VpdGUxGDAWBgNVBAMMD2Jhci5leGFtcGxlLmNvbTAeFw0xOTA3MDgxMzU2MTda\n    #     Fw0yMDA3MDcxMzU2MTdaMHsxCzAJBgNVBAYTAkRFMRUwEwYDVQQIDAxMb3dlciBT\n    #     YXhvbnkxEDAOBgNVBAcMB0hhbm92ZXIxFTATBgNVBAoMDFRlc3RpbmcgQ29ycDES\n    #     MBAGA1UECwwJVGVzdHN1aXRlMRgwFgYDVQQDDA9iYXIuZXhhbXBsZS5jb20wggIi\n    #     MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCv4mHMdVUcafmaSHVpUM0zZWp5\n    #     NFXfboxA4inuOkE8kZlbGSe7wiG9WqLirdr39Ts+WSAFA6oANvbzlu3JrEQ2CHPc\n    #     CNQm6diPREFwcDPFCe/eMawbwkQAPVSHPts0UoRxnpZox5pn69ghncBR+jtvx+/u\n    #     P6HdwW0qqTvfJnfAF1hBJ4oIk2AXiip5kkIznsAh9W6WRy6nTVCeetmIepDOGe0G\n    #     ZJIRn/OfSz7NzKylfDCat2z3EAutyeT/5oXZoWOmGg/8T7pn/pR588GoYYKRQnp+\n    #     YilqCPFX+az09EqqK/iHXnkdZ/Z2fCuU+9M/Zhrnlwlygl3RuVBI6xhm/ZsXtL2E\n    #     Gxa61lNy6pyx5+hSxHEFEJshXLtioRd702VdLKxEOuYSXKeJDs1x9o6cJ75S6hko\n    #     Ml1L4zCU+xEsMcvb1iQ2n7PZdacqhkFRUVVVmJ56th8aYyX7KNX6M9CD+kMpNm6J\n    #     kKC1li/Iy+RI138bAvaFplajMF551kt44dSvIoJIbTr1LigudzWPqk31QaZXV/4u\n    #     kD1n4p/XMc9HYU/was/CmQBFqmIZedTLTtK7clkuFN6wbwzdo1wmUNgnySQuMacO\n    #     gxhHxxzRWxd24uLyk9Px+9U3BfVPaRLiOPaPoC58lyVOykjSgfpgbus7JS69fCq7\n    #     bEH4Jatp/10zkco+UQIDAQABo1MwUTAdBgNVHQ4EFgQUjXH6PHi92y4C4hQpey86\n    #     r6+x1ewwHwYDVR0jBBgwFoAUjXH6PHi92y4C4hQpey86r6+x1ewwDwYDVR0TAQH/\n    #     BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAFE4SdKsX9UsLy+Z0xuHSxhTd0jfn\n    #     Iih5mtzb8CDNO5oTw4z0aMeAvpsUvjJ/XjgxnkiRACXh7K9hsG2r+ageRWGevyvx\n    #     CaRXFbherV1kTnZw4Y9/pgZTYVWs9jlqFOppz5sStkfjsDQ5lmPJGDii/StENAz2\n    #     XmtiPOgfG9Upb0GAJBCuKnrU9bIcT4L20gd2F4Y14ccyjlf8UiUi192IX6yM9OjT\n    #     +TuXwZgqnTOq6piVgr+FTSa24qSvaXb5z/mJDLlk23npecTouLg83TNSn3R6fYQr\n    #     d/Y9eXuUJ8U7/qTh2Ulz071AO9KzPOmleYPTx4Xty4xAtWi1QE5NHW9/Ajlv5OtO\n    #     OnMNWIs7ssDJBsB7VFC8hcwf79jz7kC0xmQqDfw51Xhhk04kla+v+HZcFW2AO9so\n    #     6ZdVHHQnIbJa7yQJKZ+hK49IOoBR6JgdB5kymoplLLiuqZSYTcwSBZ72FYTm3iAr\n    #     jzvt1hxpxVDmXvRnkhRrIRhK4QgJL0jRmirBjDY+PYYd7bdRIjN7WNZLFsgplnS8\n    #     9w6CwG32pRlm0c8kkiQ7FXA6BYCqOsDI8f1VGQv331OpR2Ck+FTv+L7DAmg6l37W\n    #     +LB9LGh4OAp68ImTjqf6ioGKG0RBSznwME+r4nXtT1S/qLR6ASWUS4ViWRhbRlNK\n    #     XWyb96wrUlv+E8I=\n    #     -----END CERTIFICATE-----\n  # Creates a secret with optional repository credentials\n  repositoryCredentials:\n    {}\n    # sample-ssh-key: |\n    # -----BEGIN RSA PRIVATE KEY-----\n    # MIICXAIBAAKBgQCcmiVJXGUvL8zqWmRRETbCKgFadtjJ9WDQpSwiZzMiktpYBo0N\n    # z0cThzGQfWqvdiJYEy72MrKCaSYssV3eHP5zTffk4VBDktNfdl1kgkOpqnh7tQO4\n    # nBONRLzcK6KEbKUsmiTbW8Jb4UFYDhyyyveby7y3vYePmaRQIrlEenVfKwIDAQAB\n    # AoGAbbg+WZjnt9jYzHWKhZX29LDzg8ty9oT6URT4yB3gIOAdJMFqQHuyg8cb/e0x\n    # O0AcrfK623oHwgEj4vpeFwnfaBdtM5GfH9zaj6pnXV7VZc3oBHrBnHUgFT3NEYUe\n    # tt6rtatIguBH61Aj/pyij9sOfF0xDj0s1nwFTbdHtZR/31kCQQDIwcVTqhKkDNW6\n    # cvdz+Wt3v9x1wNg+VhZhyA/pKILz3+qtn3GogLrQqhpVi+Y7tdvEv9FvgKaCjUp8\n    # 6Lfp6dDFAkEAx7HpQbXFdrtcveOi9kosKRDX1PT4zdhB08jAXGlV8jr0jkrZazVM\n    # hV5rVCuu35Vh6x1fiyGwwiVsqhgWE+KPLwJAWrDemasM/LsnmjDxhJy6ZcBwsWlK\n    # xu5Q8h9UwLmiXtVayNBsofh1bGpLtzWZ7oN7ImidDkgJ8JQvgDoJS0xrGQJBALPJ\n    # FkMFnrjtqGqBVkc8shNqyZY90v6oM2OzupO4dht2PpUZCDPAMZtlTWXjSjabbCPc\n    # NxexBk1UmkdtFftjHxsCQGjG+nhRYH92MsmrbvZyFzgxg9SIOu6xel7D3Dq9l5Le\n    # XG+bpHPF4SiCpAxthP5WNa17zuvk+CDsMZgZNuhYNMo=\n    # -----END RSA PRIVATE KEY-----\n  secret:\n    createSecret: true\n    ## Annotations to be added to argocd-secret\n    ##\n    annotations: {}\n\n    # Webhook Configs\n    githubSecret: \"\"\n    gitlabSecret: \"\"\n    bitbucketServerSecret: \"\"\n    bitbucketUUID: \"\"\n    gogsSecret: \"\"\n\n    # Custom secrets. Useful for injecting SSO secrets into environment variables.\n    # Ref: https://argoproj.github.io/argo-cd/operator-manual/sso/\n    # Note that all values must be non-empty.\n    extra:\n      {}\n      # LDAP_PASSWORD: \"mypassword\"\n\n    # Argo TLS Data.\n    argocdServerTlsConfig:\n      {}\n      # key:\n      # crt: |\n      #   -----BEGIN CERTIFICATE-----\n      #   \u003ccert data\u003e\n      #   -----END CERTIFICATE-----\n      #   -----BEGIN CERTIFICATE-----\n      #   \u003cca cert data\u003e\n      #   -----END CERTIFICATE-----\n\n    # Argo expects the password in the secret to be bcrypt hashed. You can create this hash with\n    # `htpasswd -nbBC 10 \"\" $ARGO_PWD | tr -d ':\\n' | sed 's/$2y/$2a/'`\n    # argocdServerAdminPassword:\n    # Password modification time defaults to current time if not set\n    # argocdServerAdminPasswordMtime: \"2006-01-02T15:04:05Z\"\n\nopenshift:\n  enabled: false"
            ],
            "verify": false,
            "version": "2.11.2",
            "wait": true
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "kubernetes_namespace",
      "name": "cicd",
      "provider": "provider[\"registry.terraform.io/hashicorp/kubernetes\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "cicd",
            "metadata": [
              {
                "annotations": {},
                "generate_name": "",
                "generation": 0,
                "labels": {},
                "name": "cicd",
                "resource_version": "11305",
                "self_link": "",
                "uid": "31f4ee84-85ab-475d-ae8a-7716615df297"
              }
            ],
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiZGVsZXRlIjozMDAwMDAwMDAwMDB9fQ=="
        }
      ]
    }
  ]
}
